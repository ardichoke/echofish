<?php

/**
 * This is the model class for table "host".
 *
 * The followings are the available columns in table 'host':
 * @property string $ip
 * @property string $fqdn
 * @property string $short
 * @property string $description
 */
class Host extends CActiveRecord
{
	/**
	 * @return string the associated database table name
	 */
  public $ipoctet=null;
	public function tableName()
	{
		return 'host';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('ip, fqdn', 'required'),
			array('ip', 'length', 'max'=>16),
			array('fqdn', 'length', 'max'=>255),
			array('short', 'length', 'max'=>50),
			array('description', 'safe'),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('ip, fqdn, short, description', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'ip' => 'Ip',
			'fqdn' => 'Fqdn',
			'short' => 'Short',
			'description' => 'Description',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('ip',$this->ip,true);
		$criteria->compare('fqdn',$this->fqdn,true);
		$criteria->compare('short',$this->short,true);
		$criteria->compare('description',$this->description,true);
    if (Yii::app ()->user->getState ( 'pageSize', Yii::app ()->params ['defaultPageSize'] ) == 0)
      $pagination = false;
    else
      $pagination = array (
          'pageSize' => Yii::app ()->user->getState ( 'pageSize', Yii::app ()->params ['defaultPageSize'] ) 
      );
    
    return new CActiveDataProvider ( $this, array (
        'criteria' => $criteria,
        'pagination' => $pagination 
    )
     );
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return Host the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

  public function defaultScope()
  {
        return array(
                'select'=>'*,inet_ntoa(ip) as ipoctet',
        );  
  }

  public function DNSBL()
  {
    $octet=explode('.',$this->ipoctet);
    $revip=sprintf("%d.%d.%d.%d",$octet[3],$octet[2],$octet[1],$octet[0]);
    $dnsbls=array("xbl.spamhaus.org","cbl.abuseat.org","zen.spamhaus.org", "dul.dnsbl.sorbs.net");
    foreach($dnsbl as $bl) 
      $check[$bl]=gethostbyname($revip.'.'.$bl);
    return $check;
  }

  
  /* 
   * Resolve our IP and pupulate
   * the remaining fields of the model 
   */
  public function resolve()
  {
      $this->fqdn=gethostbyaddr($this->ipoctet);
      if($this->fqdn!==false)
      {
        if(explode('.',$this->fqdn)!=array())
          $this->short=array_shift(explode('.',$this->fqdn));
        $this->description="Host entry auto-generated by model at ".time();
      }
      else
      {
        $this->fqdn=$this->ipoctet;
        $this->short=$this->ipoctet;
        $this->description="Host failed to resolve. Auto-generated by model at ".time();
      }
  }

  public function beforeSave()
  {
    if(ip2long($this->ipoctet)!==false && $this->ip!=ip2long($this->ipoctet))
      $this->ip=ip2long($this->ip);
    return parent::beforeSave();
  }
}
